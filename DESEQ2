library(ggplot2)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(dplyr)
library(gplots)
library(gProfileR)
library(clusterProfiler)
library(DOSE)
library(org.Hs.eg.db)
library(biomaRt)
library(edgeR)
library(corrplot)
library(Hmisc)

setwd("~/Box Sync/Clinical_Projects/neonatal sepsis/NS_RNA/")
source("foo.R")
load("raw_filter_normalize100.rda")

# ##sample correlation after filtering and log transformation
cortest<- cor(NS_data1_LOG2, use = "all.obs", method = "pearson")
cortest
#write.csv(cortest, file= "results100/filter_log2/corrtest.csv", row.names= TRUE, col.names = TRUE)
corsig <- rcorr(as.matrix(NS_data1), type="pearson")
corsig$r #correlation coefficients
corsig$P #correlation p values
corrplot(cortest, type = "upper", order = "hclust", tl.pos = "td", tl.cex=0.5,
         tl.col = "black", tl.srt = 45)
#corrplot(corsig$r, type = "upper", order = "hclust", 
#         tl.col = "black", tl.srt = 45)

low_corr <- as.data.frame(corsig$r)

#repeat on euclidean distane of log tranformed data
hc = hclust(dist(t(NS_data1_LOG2)))
two <- cutree(hc, k=2)
plot(hc, col=two)
#need to color by groups
immune <- two[two==2] %>% as.data.frame()
immune <- NS_meta[NS_meta$IPM_ID %in% rownames(immune),]
nonimmune <- NS_meta[!NS_meta$IPM_ID %in% rownames(new_meta),]
nonimmune$immune <- "nonimmune"
#now repeat analysis with immune vs non cohorts, identify genes that are highest in immune cohort, look at variablity of the expression of those genes to hypothesize if similar reaction or not


## Create DESeq2Dataset object
## the design here is what you are sorting by. It must be a column name in your metadata file
## this needs to be updated to match most recent metadata column names
dds_NS <- DESeqDataSetFromMatrix(countData = NS_data1_LOG2, colData = NS_meta, design = ~ Hydrocephalus)
dds_NS <- DESeq(dds_NS)
dds_NS <- estimateSizeFactors(dds_NS)
size <- sizeFactors(dds_NS)
normalized_counts <- counts(dds_NS, normalized=TRUE)
#write.table(normalized_counts, file="results100/filter_log2/NS_normalized_counts_DESeq2.txt", sep="\t", quote=F, col.names=NA)

# Plot dispersion estimates
plotDispEsts(dds_NS)
# Find names of coefficients- This is what you use to define your contrasts
resultsNames(dds_NS)

## Define contrasts for the two lines- your contrasts must be present in resultsNames(). This is how you make the direct comparison. The second one must always be what you are comparing to (wildtype, etc). 
contrast_NS <- list( "HydrocephalusPIH", "HydrocephalusNPIH")

# Extract results table
res_table_NS <- results(dds_NS, contrast=contrast_NS)
head(res_table_NS)

## Summarize results
summary(res_table_NS, alpha = 0.01)

# Plot expression for single gene
plotCounts(dds_NS, gene="ENSG00000000419.12", intgroup="Hydrocephalus")

### Set thresholds- This is creating a logical vector with the threshold for which your p value and fold change is true
padj.cutoff <- 0.01
lfc.cutoff <- 3.5

threshold_NS <- res_table_NS$padj < padj.cutoff & abs(res_table_NS$log2FoldChange) > lfc.cutoff
length(which(threshold_NS == TRUE)) #1266
res_table_NS$threshold <- threshold_NS 
NS_sig<- subset(res_table_NS, threshold == TRUE)
#write.csv(NS_sig, file="results100/filter_log2/NS_TOTAL_SIGNIFICANT.csv")

#volcano plot
df <- data.frame(res_table_NS)
ggplot(df) +
  geom_point(aes(x=log2FoldChange, y=-log10(padj), colour=threshold_NS)) +
  xlim(c(-2,2)) +
  # ylim(c(0,1)) +
  ggtitle('NS') +
  xlab("log2 fold change") +
  ylab("-log10 adjusted p-value") +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5)),
        axis.title = element_text(size = rel(1.5)),
        axis.text = element_text(size = rel(1.25)))
dev.copy(png,'results100/filter_log2/DESeq2_volcano')
dev.off()

# threshold_UPREGULATED_NS <- res_table_NS$padj < padj.cutoff & res_table_NS$log2FoldChange > lfc.cutoff
# length(which(threshold_UPREGULATED_NS == TRUE)) #0
# # res_table_NS$threshold_UP <- threshold_UPREGULATED_NS 
# # NS_sig_up<-subset(res_table_NS, threshold_UP == TRUE)
# # write.csv(NS_sig_up, file="results100/NS_UP_SIGNIFICANT.csv")
# 
# threshold_DOWNREGULATED_NS <- res_table_NS$padj < padj.cutoff & res_table_NS$log2FoldChange < -lfc.cutoff
# length(which(threshold_DOWNREGULATED_NS == TRUE)) #1266
# res_table_NS$threshold_DOWN <- threshold_DOWNREGULATED_NS 
# NS_sig_down<-subset(res_table_NS, threshold_DOWN == TRUE)
# #write.csv(NS_sig_down, file="results100/filter_log2/NS_DOWN_SIGNIFICANT.csv")

#heatmap
sigNS <- row.names(NS_sig)
norm_sigNS <- normalized_counts[sigNS,]
annotation <- NS_meta[,c('Hydrocephalus','CSF_CC','Age_col.weeks.','WBC', 'Region'), drop=F]
#remove region, Gender, HIV
heat.colors <- brewer.pal(6, "YlOrRd")
annotation.row <- NS_meta[,c("IPM_ID", "Hydrocephalus", "CSF_CC", "Age_col.weeks.", "WBC","Region")]
heats =pheatmap(norm_sigNS, color = heat.colors, cluster_rows = T, show_rownames=F, annotation=annotation,
         annotation.row= annotation.row, border_color=NA, fontsize = 10, scale="row",
         fontsize_row = 10)
dev.copy(png,'results100/filter_log2/DESeq2_cluster_heat_LFC3_5')
dev.off()
#test assocation of clusters
cluster=cutree(heats$tree_col,4)
##need to assess phenotypic enrichment in clusters

#heat map top expressed genes
select <- order(rowMeans(counts(dds_NS,normalized=TRUE)),decreasing=TRUE)[1:30]
hmcol<- colorRampPalette(brewer.pal(9, 'GnBu'))(100)
heatmap.2(counts(dds_NS,normalized=TRUE)[select,], col = hmcol,
          Rowv = FALSE, Colv = FALSE, scale='none',
          dendrogram='none', trace='none', margin=c(10,6),,cexRow = 0.3, cexCol = 0.3)
dev.copy(png,'results100//DESeq2_heatmap1')
dev.off()
heatmap.2(assay(vsd)[select,], col = hmcol,
          Rowv = FALSE, Colv = FALSE, scale='none',
          dendrogram='none', trace='none', margin=c(10, 6),cexRow = 0.3, cexCol = 0.3)
dev.copy(png,'results100/DESeq2_heatmap2')
dev.off()
heatmap.2(assay(rld)[select,], col = hmcol,
          Rowv = FALSE, Colv = FALSE, scale='none',
          dendrogram='none', trace='none', margin=c(10, 6),cexRow = 0.3, cexCol = 0.3)
dev.copy(png,'results100/DESeq2_heatmap3')
dev.off()

#clustering of samples
distsRL <- dist(t(assay(dds_NS)))
mat<- as.matrix(distsRL)
rownames(mat) <- colnames(mat) <- with(colData(dds_NS),
                                       paste(Hydrocephalus,samples , sep=' : '))
hc <- hclust(distsRL)
heatmap.2(mat, Rowv=as.dendrogram(hc),
          symm=TRUE, trace='none',
          col = rev(hmcol), margin=c(13, 13), cexRow =0.3, cexCol = 0.3)
dev.copy(png,'results100/deseq2_heatmaps_samplebysample.png')
dev.off()

#pca
print(plotPCA(((rld)), intgroup=c('Hydrocephalus')))
dev.copy(png,'results100/deseq2_pca.png')
dev.off()

#cooks distahce over rank of wald statistics
W <- res_table_NS$stat
maxCooks <- apply(assays(dds_NS)[['cooks']],1,max)
idx <- !is.na(W)
plot(rank(W[idx]), maxCooks[idx], xlab='rank of Wald statistic',
     ylab='maximum Cooks distance per gene',
     ylim=c(0,5), cex=.4, col=rgb(0,0,0,.3))
m <- ncol(dds_NS)
p <- 3
abline(h=qf(.99, p, m - p))
dev.copy(png,'results100/deseq2_cooksdist.png')
dev.off()

#independent filtering low counts and low likelihood of low pvalues
plot(res_table_NS$baseMean+1, -log10(res_table_NS$pvalue),
     log='x', xlab='mean of normalized counts',
     ylab=expression(-log[10](pvalue)),
     ylim=c(0,30),
     cex=.4, col=rgb(0,0,0,.3))
dev.copy(png,'results100/deseq2_indep_filt.png')
dev.off()

#outliers removed
ddsClean <- replaceOutliersWithTrimmedMean(dds_NS)
ddsClean <- DESeq(ddsClean)
tab <- table(initial = results(dds_NS)$padj < .01,
             cleaned = results(ddsClean)$padj < .01)
addmargins(tab)
write.csv(as.data.frame(tab),file='results100/sim_condition_treated_results_cleaned_summary_deseq2.csv')
resClean <- results(ddsClean)
write.csv(as.data.frame(resClean),file='results100/sim_condition_treated_results_cleaned_deseq2.csv')

plotDispEsts(ddsClean)
# selectx <- order(rowMeans(counts(ddsClean,normalized=TRUE)),decreasing=TRUE)[1:30]
# heatmap.2(counts(ddsClean,normalized=TRUE)[selectx,], col = hmcol,
#           Rowv = FALSE, Colv = FALSE, scale='none',
#           dendrogram='none', trace='none', margin=c(10,6))
# dev.copy(png,'results100/filter_log2/DESeq2_heatmap1x')
# dev.off()
# heatmap.2(assay(rld)[selectx,], col = hmcol,
#           Rowv = FALSE, Colv = FALSE, scale='none',
#           dendrogram='none', trace='none', margin=c(10, 6))
# dev.copy(png,'results100/filter_log2/DESeq2_heatmap2x')
# dev.off()
# heatmap.2(assay(vsd)[selectx,], col = hmcol,
#           Rowv = FALSE, Colv = FALSE, scale='none',
#           dendrogram='none', trace='none', margin=c(10, 6))
# dev.copy(png,'results100/filter_log2/DESeq2_heatmap3x')
# dev.off()

plot(resClean$baseMean+1, -log10(resClean$pvalue),
     log='x', xlab='mean of normalized counts',
     ylab=expression(-log[10](pvalue)),
     ylim=c(0,30),
     cex=.4, col=rgb(0,0,0,.3))
dev.copy(png,'results100/filter_log2/deseq2_indep_filt_clean.png')
dev.off()

#clustering of samples
distsRL <- dist(t(assay(rld)))
mat<- as.matrix(distsRL)
rownames(mat) <- colnames(mat) <- with(colData(ddsClean),
                                       paste(Hydrocephalus,samples , sep=' : '))
hc <- hclust(distsRL)
heatmap.2(mat, Rowv=as.dendrogram(hc),
          symm=TRUE, trace='none',
          col = rev(hmcol), margin=c(13, 13))
dev.copy(png,'results100/deseq2_heatmaps_samplebysamplex.png')
dev.off()

###further downstream steps not done on this dataset yet
#Likelihood ratio test
dds_NS_sig <- dds_NS[which(rownames(dds_NS)%in%rownames(NS_sig))]
dds_lrt <- DESeq(dds_NS_sig, test="LRT", reduced = ~ 1)
res_LRT <- results(dds_lrt)
length(which(res_LRT$padj < padj.cutoff))
res_LRT$threshold <- res_LRT$padj < padj.cutoff
LRTgenes <- row.names(res_LRT)[which(res_LRT$threshold)]
NS_genes <- row.names(res_table_NS)[which(res_table_NS$threshold)]

#GO, input just 1266 significant genes
sig_genes_table <- subset(res_table_NS, padj < 0.001) 
sig_genes_table <- data.frame(sig_genes_table)
sig_genes_table <- sig_genes_table[rownames(sig_genes_table)%in%NS_genes,]

sig_genes_ensembl <- rownames(sig_genes_table)
sig_genes_ensembl <- gsub("\\.[0-9]*$", "", sig_genes_ensembl)
sig_genes_ensembl <- sig_genes_ensembl[!duplicated(sig_genes_ensembl)]

gprofiler_results_NS <- gprofiler(query = sig_genes_ensembl, 
                                  organism = "hsapiens",
                                  ordered_query = T, 
                                  exclude_iea = F, 
                                  max_p_value = 0.001, 
                                  correction_method = "fdr",
                                  hier_filtering = "none", 
                                  domain_size = "annotated")


write.table(gprofiler_results_NS, 
            "results100/filter_log2/gprofiler_NS.txt", 
            sep="\t", quote=F, row.names=F)

allterms_NS <- gprofiler_results_NS$term.id

GOs_NS <- allterms_NS[grep('GO:', allterms_NS)]

write.table(GOs_NS, "results100/filter_log2/GOs_CPAN.txt", sep="\t", quote=F, row.names=F, col.names=F)
#######feed into revigo

#clusterProfiler for GO
mart <- useDataset("hsapiens_gene_ensembl",
                   useMart('ENSEMBL_MART_ENSEMBL',
                           host =  'ensembl.org'))
sig_genes_ensembl <- rownames(sig_genes_table)
sig_genes_ensembl <- gsub("\\.[0-9]*$", "", sig_genes_ensembl)
sig_genes_ensembl <- sig_genes_ensembl[!duplicated(sig_genes_ensembl)]

sig_genes_ensembl <- getBM(filters = "ensembl_gene_id", 
                           values = sig_genes_ensembl,
                           attributes = c("ensembl_gene_id", "external_gene_name"),
                           mart = mart)
sig_genes <- as.character(sig_genes_ensembl$ensembl_gene_id)

all_genes_ensembl <- rownames(NS_data)
all_genes_ensembl <- gsub("\\.[0-9]*$", "", all_genes_ensembl)
all_genes_ensembl <- all_genes_ensembl[!duplicated(all_genes_ensembl)]
all_genes_ensembl <- getBM(filters = "ensembl_gene_id", 
                           values = all_genes_ensembl,
                           attributes = c("ensembl_gene_id", "external_gene_name"),
                           mart = mart)
all_genes <- as.character(all_genes_ensembl$ensembl_gene_id)

ego <- enrichGO(gene=sig_genes, universe=all_genes, keytype ="ENSEMBL", OrgDb=org.Hs.eg.db, ont="BP", pAdjustMethod = "BH", qvalueCutoff =0.05, readable=TRUE)
#ego <- enrichGO(gene=sig_genes, universe=all_genes, OrgDb=org.Hs.eg.db, ont="BP", pAdjustMethod = "BH", qvalueCutoff =0.05, readable=TRUE)
ego2 <- as.data.frame(ego)
cluster_summary <- summary(ego2)
dotplot(ego, showCategory=25, font.size=5)
dev.copy(png,'results100/filter_log2/DESeq2_dotplot')
dev.off()
enrichMap(ego, n=25, fixed = TRUE, font.size=2)
cnetplot(ego, categorySize="pvalue", showCategory = 5, vertex.label.font=3)

# ##data for IPA
# DE_NS <- NS_data1_LOG2
# DE_NS$gene <- rownames(NS_data1_LOG2)
# write.table(DE_NS, file="results100/filter_log2/NS_DE.txt", sep="\t", quote=F, col.names=T, row.names = F)


#####Can consider other data transformations below
rld <- rlogTransformation(dds_NS, blind = T)
vsd <- varianceStabilizingTransformation(dds_NS, blind = T)
save(rld, vsd, file = "normalized.rld.vsd.rda")

par(mai=ifelse(1:4 <= 2, par('mai'), 0))
px     <- counts(dds_NS)[,1] / sizeFactors(dds_NS)[1]
ord    <- order(px)
ord    <- ord[px[ord]<150]
ord    <- ord[seq(1, length(ord), length=50)]
last   <- ord[length(ord)]
vstcol <- c('blue', 'black')
matplot(px[ord], cbind(assay(vsd)[, 1], log2(px))[ord, ], lty=1, col=vstcol, xlab='n', ylab='f(n)')
legend('bottomright', legend = c(expression('variance stabilizing transformation'), expression(log[2](n/s[1]))), fill=vstcol)
dev.copy(png,'results100/DESeq2_VST_and_log2.png')
