#this script makes raw, filtered and normalized filtered expression data then creates eSet
library(ggplot2)
library(dplyr)
setwd("~/Box Sync/Clinical_Projects/neonatal sepsis/NS_RNA/")
source("foo.R")

#make a rawcounts matrix and metadata file
NS_data <- read.delim("data100/Sepsis_100RNA.genes.STAR.results.txt", row.names = 1, header=T, stringsAsFactors = F)
NS_data <- NS_data[grep("^ENSG", rownames(NS_data)),]
NS_data <- round(NS_data)

meta <- read.csv("data100/Metadata.csv", stringsAsFactors = F)
NS_meta <- meta %>% filter(Sample_Type=="CSF")
NS_meta <- meta %>% filter(IPM_ID %in% colnames(NS_data))
NS_meta <- NS_meta[,c("IPM_ID", "ID", "HydrocephalusStatus", "CSFCellCount", "Ageatsamplecollection", "Gender", "WBC", "HIV", "Region", "Blood_culture_Post", "CSFCulture", "Gestation", "Fever", "Apgar_5", "Died")]
for(i in 1:nrow(NS_meta)){
  NS_meta$meta_ID[i] <-  paste(NS_meta$HydrocephalusStatus[i], NS_meta$IPM_ID[i], sep = ":")
}
NS_meta <- NS_meta %>% filter(!duplicated(NS_meta$IPM_ID))
row.names(NS_meta) <- NS_meta$IPM_ID

NS_data <- NS_data[,colnames(NS_data) %in% NS_meta$IPM_ID]
for(i in 1:ncol(NS_data)){
  colnames(NS_data)[i] <- NS_meta$IPM_ID[NS_meta$IPM_ID==colnames(NS_data)[i]]
}

### Check that sample names match in both files
all(names(NS_data) %in% rownames(NS_meta))
all(names(NS_data) == rownames(NS_meta))

##remove all genes without count 1 minimum in at least 20 NPIH sample to make filtered dataset
NS_data1<-filterLowGenes(NS_data,minSamples = floor(35/2))

##now log2 transform to make filtered, normalized dataset
NS_data1 <- NS_data1 +1
NS_data1_LOG2 <- log(NS_data1, 2)
NS_data1_LOG2 <- round(NS_data1_LOG2)

ave.counts <- rowMeans(NS_data1_LOG2) %>% as.data.frame()
rownames(ave.counts) <- row.names(NS_data1_LOG2)
hist(log10(ave.counts), breaks=100, main="", col="grey80",
     xlab=expression(Log[10]~"average count"))

#save(NS_data, NS_data1, NS_data1_LOG2, NS_meta, file = "raw_filter_normalize100.rda")

########test effect of filtering################
##and max count as ratio of sum of counts
NS_data1_MAX <- NS_data1
NS_data1_MAX$max <- apply(NS_data1_MAX, 1,max)
NS_data1_MAX$total <- rowSums(NS_data1_MAX[1:104])
NS_data1_MAX$ratio <- NS_data1_MAX$max/NS_data1_MAX$total
NS_data1_MAX <- NS_data1_MAX %>% filter(total<18559200)
ggplot(NS_data1_MAX)+
  geom_point(aes(x=total, y=ratio))+
  ylim(c(0,1)) +
  xlim(c(0,10000)) +
  labs(title="Concentration of Counts",
       x="Sum of Counts Per Gene", y = "Max Count / Sum")

#compared with unfiltered
NS_data_MAX <- NS_data
NS_data_MAX$max <- apply(NS_data_MAX, 1,max)
NS_data_MAX$total <- rowSums(NS_data_MAX[1:104])
NS_data_MAX$ratio <- NS_data_MAX$max/NS_data_MAX$total
NS_data_MAX <- NS_data_MAX %>% filter(total<18559200)
ggplot(NS_data_MAX)+
  geom_point(aes(x=total, y=ratio))+
  ylim(c(0,1)) +
  xlim(c(0,10000)) +
  labs(title="Concentration of Counts",
       x="Sum of Counts Per Gene", y = "Max Count / Sum")

###########now make eSets####################
library(Biobase)
library(dplyr)

load("raw_filter_normalize100.rda")
NS_matrix <- NS_data %>% as.matrix()
minimalSet <- ExpressionSet(assayData=NS_matrix)

NS_data <- NS_data[,colnames(NS_data) %in% NS_meta$IPM_ID]
for(i in 1:ncol(NS_data)){
  colnames(NS_data)[i] <- NS_meta$IPM_ID[NS_meta$IPM_ID==colnames(NS_data)[i]]
}

#create datasets, start with metadata
metadata <- colnames(NS_meta) %>% as.data.frame()
metadata[,2] <- c("patient_ID", "study_ID", "hydrocephalus_status", "csf_cell_count", "age", "sex", "blood_WBC", "HIV_status", "home_region", "BCx", "CSFCx", "GA", "fever", "Apgar", "Mort", "meta_ID")

phenoData <- new("AnnotatedDataFrame", data=NS_meta, varMetadata=metadata)
head(pData(phenoData))

experimentData <- new("MIAME", name="Sarah Morton", lab="CONSHA", contact="sarah.morton@childrens.harvard.edu", title="100_PIH", abstract="Initial Dataset",  other=list(notes="Created from counts files"))

#next step is to add features of ENSG genes
library(refGenome)
# ens <- ensemblGenome()
# read.gtf(ens, "../../../../Downloads/Homo_sapiens.GRCh38.94.gtf")
# save(ens, file="ens_genes_hg38.rda")
load("ens_genes_hg38.rda")
genes <- getGenePositions(ens)
NS_genes <- rownames(NS_data) %>% as.data.frame()
NS_genes$short <- sapply(strsplit(as.character(NS_genes$.), "\\."), "[", 1)
NS_ens <- genes %>% filter(gene_id %in% NS_genes$short)

NS_feature <- merge(NS_genes, NS_ens, by.x = "short", by.y = "gene_id", all.x = T)
rownames(NS_feature) <- NS_feature$.

featureData <- new("AnnotatedDataFrame", data=NS_feature)
head(pData(featureData))

head((NS_matrix))
head(pData(phenoData))
all(names(NS_matrix) %in% names(phenoData))

eSet <- ExpressionSet(assayData=NS_matrix, phenoData=phenoData, experimentData=experimentData, featureData = featureData)
#save(eSet, file = "eSet.rda")

#now redo with filtered data#######
NS_matrixF <- NS_data1 %>% as.matrix()

NS_featureF <-NS_feature %>% filter(. %in% rownames(NS_data1))
rownames(NS_featureF) <- NS_featureF$.
featureDataF <- new("AnnotatedDataFrame", data=NS_featureF)
eSetF <- ExpressionSet(assayData=NS_matrixF, phenoData=phenoData, experimentData=experimentData, featureData = featureDataF)
#save(eSetF, file = "eSetF.rda")

#now redo with normalized, filtered data#########
NS_matrixNF <- NS_data1_LOG2 %>% as.matrix()

NS_featureNF <-NS_feature %>% filter(. %in% rownames(NS_data1_LOG2))
rownames(NS_featureNF) <- NS_featureNF$.
featureDataNF <- new("AnnotatedDataFrame", data=NS_featureNF)
eSetNF <- ExpressionSet(assayData=NS_matrixNF, phenoData=phenoData, experimentData=experimentData, featureData = featureDataNF)
#save(eSetNF, file = "eSetNF.rda")

#save(eSet, eSetF, eSetNF, file = "all_eSets.rda")
